const e=JSON.parse('{"key":"v-1ac0b859","path":"/knowledge-block/star/java-generics-mechanism.html","title":"Java泛型机制","lang":"zh-CN","frontmatter":{"title":"Java泛型机制","icon":"circle-info","order":8,"category":["Knowledge"],"tag":["Knowledge"],"pageview":false,"date":"2023-09-06T00:00:00.000Z","comment":false,"breadcrumb":false,"description":"1. 为什么会有泛型\\r 泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。 引入泛型的意义在于：\\r适用于多种数据类型执行相同的代码; 我们通过一个例子来阐述，先看下下...","head":[["meta",{"property":"og:url","content":"https://manamn.space/toLeoJavaer/knowledge-block/star/java-generics-mechanism.html"}],["meta",{"property":"og:site_name","content":"ToLeoJavaer"}],["meta",{"property":"og:title","content":"Java泛型机制"}],["meta",{"property":"og:description","content":"1. 为什么会有泛型\\r 泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。 引入泛型的意义在于：\\r适用于多种数据类型执行相同的代码; 我们通过一个例子来阐述，先看下下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-03T11:52:46.000Z"}],["meta",{"property":"article:author","content":"Leo"}],["meta",{"property":"article:tag","content":"Knowledge"}],["meta",{"property":"article:published_time","content":"2023-09-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-03T11:52:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java泛型机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-03T11:52:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://manamn.space/\\"}]}"]]},"headers":[{"level":2,"title":"1. 为什么会有泛型","slug":"_1-为什么会有泛型","link":"#_1-为什么会有泛型","children":[]},{"level":2,"title":"2. 泛型的作用对象","slug":"_2-泛型的作用对象","link":"#_2-泛型的作用对象","children":[{"level":3,"title":"2.1 泛型集合","slug":"_2-1-泛型集合","link":"#_2-1-泛型集合","children":[]},{"level":3,"title":"2.2 泛型类","slug":"_2-2-泛型类","link":"#_2-2-泛型类","children":[]},{"level":3,"title":"2.3 泛型方法","slug":"_2-3-泛型方法","link":"#_2-3-泛型方法","children":[]},{"level":3,"title":"2.4 泛型数组","slug":"_2-4-泛型数组","link":"#_2-4-泛型数组","children":[]}]},{"level":2,"title":"3. 泛型通配符","slug":"_3-泛型通配符","link":"#_3-泛型通配符","children":[{"level":3,"title":"1. 常用的 T，E，K，V，？","slug":"_1-常用的-t-e-k-v","link":"#_1-常用的-t-e-k-v","children":[]},{"level":3,"title":"2. ？ 和 T 的区别","slug":"_2-和-t-的区别","link":"#_2-和-t-的区别","children":[]}]},{"level":2,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]}],"git":{"createdTime":1700057903000,"updatedTime":1701604366000,"contributors":[{"name":"gaoziman","email":"2942894660@qq.com","commits":1},{"name":"“gaoziman”","email":"“2942894660@qq.com”","commits":1}]},"readingTime":{"minutes":10.81,"words":3242},"filePathRelative":"knowledge-block/star/java-generics-mechanism.md","localizedDate":"2023年9月6日","copyright":{"author":"LeoJavaer(toleojavaer.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
