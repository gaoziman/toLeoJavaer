const t=JSON.parse('{"key":"v-54836693","path":"/knowledge-block/star/static-keyword-function-and-usage.html","title":"Static关键字作用及用法","lang":"zh-CN","frontmatter":{"title":"Static关键字作用及用法","icon":"circle-info","order":7,"category":["Knowledge"],"tag":["Knowledge"],"pageview":false,"date":"2023-09-06T00:00:00.000Z","comment":false,"breadcrumb":false,"description":"1. 概述\\r Static是静态修饰符，什么叫静态修饰符呢？大家都知道，在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，对于一个...","head":[["meta",{"property":"og:url","content":"https://manamn.space/toLeoJavaer/knowledge-block/star/static-keyword-function-and-usage.html"}],["meta",{"property":"og:site_name","content":"ToLeoJavaer"}],["meta",{"property":"og:title","content":"Static关键字作用及用法"}],["meta",{"property":"og:description","content":"1. 概述\\r Static是静态修饰符，什么叫静态修饰符呢？大家都知道，在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。这样做有什么意义呢？在Java程序里面，所有的东西都是对象，而对象的抽象就是类，对于一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-03T11:52:46.000Z"}],["meta",{"property":"article:author","content":"Leo"}],["meta",{"property":"article:tag","content":"Knowledge"}],["meta",{"property":"article:published_time","content":"2023-09-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-03T11:52:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Static关键字作用及用法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-03T11:52:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://manamn.space/\\"}]}"]]},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 修饰成员属性","slug":"_2-修饰成员属性","link":"#_2-修饰成员属性","children":[{"level":3,"title":"通过类调用 static 声明的属性","slug":"通过类调用-static-声明的属性","link":"#通过类调用-static-声明的属性","children":[]},{"level":3,"title":"没有实例化类时，调用 static 属性","slug":"没有实例化类时-调用-static-属性","link":"#没有实例化类时-调用-static-属性","children":[]},{"level":3,"title":"static 属性与非 static 属性的区别","slug":"static-属性与非-static-属性的区别","link":"#static-属性与非-static-属性的区别","children":[]}]},{"level":2,"title":"3. 修饰成员方法","slug":"_3-修饰成员方法","link":"#_3-修饰成员方法","children":[]},{"level":2,"title":"4. 修饰代码块","slug":"_4-修饰代码块","link":"#_4-修饰代码块","children":[]},{"level":2,"title":"5. 修饰内部类","slug":"_5-修饰内部类","link":"#_5-修饰内部类","children":[]},{"level":2,"title":"6. static加载顺序","slug":"_6-static加载顺序","link":"#_6-static加载顺序","children":[]}],"git":{"createdTime":1700057903000,"updatedTime":1701604366000,"contributors":[{"name":"gaoziman","email":"2942894660@qq.com","commits":1},{"name":"“gaoziman”","email":"“2942894660@qq.com”","commits":1}]},"readingTime":{"minutes":9.41,"words":2823},"filePathRelative":"knowledge-block/star/static-keyword-function-and-usage.md","localizedDate":"2023年9月6日","copyright":{"author":"LeoJavaer(toleojavaer.cn)","license":"MIT"},"autoDesc":true}');export{t as data};
