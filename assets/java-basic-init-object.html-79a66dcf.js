import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-2feb0630.js";const i={},u=e(`<h1 id="_04-java基础篇-初始面向对象" tabindex="-1"><a class="header-anchor" href="#_04-java基础篇-初始面向对象" aria-hidden="true">#</a> 04 Java基础篇 初始面向对象</h1><blockquote><p>大家好，我是Leo🫣🫣🫣，最近在复习Java基础内容，这个专栏后续也会一直更新下去，Java基础乃是咱们Java的根基，俗话说，基础不牢，地动山摇。今天我们主要简单认识一下面向对象。好了，话不多说让我们开始吧😎😎😎。</p></blockquote><h2 id="_1-学前案例" tabindex="-1"><a class="header-anchor" href="#_1-学前案例" aria-hidden="true">#</a> 1.学前案例</h2><h3 id="_1-1问题提出" tabindex="-1"><a class="header-anchor" href="#_1-1问题提出" aria-hidden="true">#</a> 1.1问题提出</h3><p>我们首先来看一个看案例，想想通过你之前所学的知识如何解决。</p><blockquote><p>小明养了两只狗:一只名字叫小白,今年 3 岁,白色。还有一只叫小花,今年10岁,花色。请编写一个程序，当用户输入小狗的名字时，就显示该狗的名字，年龄，颜色。如果用户输入的小狗名错误，则显示 小明没有这只小狗。</p></blockquote><p>通过我们之前学习的技术来看，我们有两种方式来使用Java代码解决这个问题。</p><ul><li>单独定义变量来解决</li><li>使用数组解决</li></ul><p><strong>话不多说，直接上代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 单独使用变量来解决</span>

        <span class="token comment">// 第一只小狗</span>
         <span class="token class-name">String</span> cat1Name <span class="token operator">=</span> <span class="token string">&quot;小白&quot;</span><span class="token punctuation">;</span>
         <span class="token keyword">int</span> cat1Age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
         <span class="token class-name">String</span> cat1Color <span class="token operator">=</span> <span class="token string">&quot;白色&quot;</span><span class="token punctuation">;</span>

         <span class="token comment">// 第二只小狗</span>
         <span class="token class-name">String</span> cat2Name <span class="token operator">=</span> <span class="token string">&quot;小花&quot;</span><span class="token punctuation">;</span>
         <span class="token keyword">int</span> cat2Age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
         <span class="token class-name">String</span> cat2Color <span class="token operator">=</span> <span class="token string">&quot;花色&quot;</span><span class="token punctuation">;</span>
        
         <span class="token comment">// 使用数组的方式</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dog1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;小白&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;白色&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dog2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;小花&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;花色&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不知道小伙伴发现问题没有，其实这两者方式虽然都能实现，但确是漏洞百出，接下来我们一点一点分析。</p><p><strong>使用功能单独变量来解决：</strong> 不利于数据的管理(你把一只狗的信息拆解)</p><p><strong>使用数组的方式来解决</strong></p><ol><li>数据类型体现不出来</li><li>只能通过**[下标]**获取信息，造成变量名字和内容的对应关系不明确</li><li>不能体现猫的行为</li></ol><h3 id="_1-2类与对象的引出" tabindex="-1"><a class="header-anchor" href="#_1-2类与对象的引出" aria-hidden="true">#</a> 1.2类与对象的引出</h3><p>上述我们知道了我们这个程序的不足，于是我们引入了我们这节课的重点内容：<strong>类与对象</strong>。</p><blockquote><p>Java 设计者引入类与对象(OOP) ，根本原因就是现有的技术，不能完美的解决新的新的需求.</p></blockquote><p>在Java编程语言中，<strong>类</strong>和<strong>对象</strong>是两个核心概念。它们是面向对象编程(<strong>OOP</strong>)的基石。下面是对它们的简要描述：</p><ol><li><p><strong>类 (Class)</strong>：</p><ul><li><strong>定义</strong>：类是一个模板或蓝图，<code>用于描述一组具有相同属性和方法的对象的特性</code>。</li><li><strong>组件</strong>：类主要包括两个部分：<strong>成员变量</strong>(也称为属性、字段或实例变量)和 <strong>方法</strong>(函数)。</li><li><strong>实例</strong>：想象你有一个<strong>车</strong>的类。这个类描述了车可能有的所有特性，例如颜色、型号、速度**(成员变量)<strong>等，以及车可能执行的所有动作，例如加速、减速或停车</strong>(方法)**。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token comment">// 成员变量</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> model<span class="token punctuation">;</span>

    <span class="token comment">// 构造方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token class-name">String</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accelerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Car is accelerating&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>对象 (Object)</strong>：</p><ul><li><strong>定义</strong>：对象是类的一个实例。当您基于类创建一个对象时，该对象将包含类中定义的所有属性和方法。</li><li><strong>创建</strong>：使用<strong>new</strong>关键字和构造函数来创建类的新实例**(对象)**。</li><li><strong>实例</strong>：使用上面的<strong>车</strong>类，你可以创建多个具有不同属性的车对象。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Car</span> toyota <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Corolla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Car</span> honda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;Blue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Civic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

toyota<span class="token punctuation">.</span><span class="token function">accelerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Car is accelerating</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>总结：类是一个抽象的概念，描述了如何创建对象，而对象则是这个描述的具体实例。在面向对象编程中，我们设计和创建类，然后使用这些类来创建对象，这些对象将在程序中执行实际的任务。</strong></p><p>类和对象之间的关系是：<strong>类是对象的抽象，而对象是类的具体实例。</strong></p><p>在Java中，通过定义类可以创建多个对象。类定义了对象的共同属性和行为，对象则具体化了类的定义，每个对象都有自己的<strong>状态(属性值)<strong>和</strong>行为(方法调用)</strong>。</p><h3 id="_1-3问题的解决" tabindex="-1"><a class="header-anchor" href="#_1-3问题的解决" aria-hidden="true">#</a> 1.3问题的解决</h3><p>基于上个案例，我们可以通过类和对象的方式来解决。<br> 首先我们需要定义一个Dog类，这个类的对象可以存储每只狗的名字、年龄和颜色。然后、可以创建一个DogsKeeper类来存储并管理所有的Dog对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Leo</span><span class="token punctuation">.</span>exer<span class="token punctuation">.</span>object01<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : Leo
 * <span class="token keyword">@version</span> 1.0
 * <span class="token keyword">@date</span> 2023-10-26 16:09
 * <span class="token keyword">@description</span> : Dog 测试类
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">String</span> color<span class="token punctuation">;</span>

    <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DogsKeeper</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span> dogsMap<span class="token punctuation">;</span>

    <span class="token class-name">DogsKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dogsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">addDog</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dogsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> <span class="token function">findDog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> dogsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dog <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;小明没有这只小狗&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;名字：&quot;</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;，年龄：&quot;</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;，颜色：&quot;</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Dog</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;小白&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;白色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Dog</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;小花&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;花色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DogsKeeper</span> keeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DogsKeeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keeper<span class="token punctuation">.</span><span class="token function">addDog</span><span class="token punctuation">(</span>dog1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        keeper<span class="token punctuation">.</span><span class="token function">addDog</span><span class="token punctuation">(</span>dog2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 假设用户输入的是&quot;小白&quot;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keeper<span class="token punctuation">.</span><span class="token function">findDog</span><span class="token punctuation">(</span><span class="token string">&quot;小白&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 假设用户输入的是&quot;小花&quot;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keeper<span class="token punctuation">.</span><span class="token function">findDog</span><span class="token punctuation">(</span><span class="token string">&quot;小花&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 假设用户输入的是&quot;小黄&quot;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keeper<span class="token punctuation">.</span><span class="token function">findDog</span><span class="token punctuation">(</span><span class="token string">&quot;小黄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-对象详解" tabindex="-1"><a class="header-anchor" href="#_2-对象详解" aria-hidden="true">#</a> 2.对象详解</h2><p>面向对象简称 OO（Object Oriented），20 世纪 80 年代以后，有了面向对象分析（OOA）、 面向对象设计（OOD）、面向对象程序设计（OOP）等新的系统开发方式模型的研究。</p><p>对 <strong>Java</strong> 语言来说，一切皆是对象。把现实世界中的对象抽象地体现在编程世界中，一个对象代表了某个具体的操作。一个个对象最终组成了完整的程序设计，这些对象可以是独立存在的，也可以是从别的对象继承过来的。对象之间通过相互作用传递信息，实现程序开发。</p><h3 id="_2-1什么是对象" tabindex="-1"><a class="header-anchor" href="#_2-1什么是对象" aria-hidden="true">#</a> 2.1什么是对象</h3><p>Java 是面向对象的编程语言，对象就是面向对象程序设计的核心。所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。对象有以下特点：</p><ul><li>对象具有属性和行为。</li><li>对象具有变化的状态。</li><li>对象具有唯一性。</li><li>对象都是某个类别的实例。</li><li>一切皆为对象，真实世界中的所有事物都可以视为对象。</li></ul><p>例如，在真实世界的学校里，会有学生和老师等实体，学生有学号、姓名、所在班级等属性（数据），学生还有学习、提问、吃饭和走路等操作。学生只是抽象的描述，这个抽象的描述称为“类”。在学校里活动的是学生个体，即张同学、李同学等，这些具体的个体称为<strong>对象</strong>，对象也称为<strong>实例</strong>。</p><h3 id="_2-2类与对象的关系示意图" tabindex="-1"><a class="header-anchor" href="#_2-2类与对象的关系示意图" aria-hidden="true">#</a> 2.2类与对象的关系示意图</h3><p>我们可以通过下面这张图清晰的理解我们使用类和对象的方式来如何解决我们刚刚上面的案例。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310261702979.png" alt="image-20231026170204702" tabindex="0" loading="lazy"><figcaption>image-20231026170204702</figcaption></figure><p><strong>注意事项：</strong></p><ol><li>从Dog类到对象，目前有几种说法： <ol><li>创建了一个对象</li><li>实例化了一个对象</li><li>把类实例化为Dog类</li></ol></li><li>上面这个Dog也不局限于Dog，可以是我们现实生活中的任意存在的。也可以是猫，人，鱼等等... 。Java最大的特点就是面向对象，</li></ol><h3 id="_2-3类与对象的区别和联系" tabindex="-1"><a class="header-anchor" href="#_2-3类与对象的区别和联系" aria-hidden="true">#</a> 2.3类与对象的区别和联系</h3><p>在Java中，虽然类**(Class)<strong>和对象</strong>(Object)**是两个概念，但是他们两个之间的关系既密切又有区别。</p><p><strong>区别：</strong></p><ol><li>定义：类是抽象的概念，用于描述对象的属性和行为，是对象的模板或蓝图；对象是类的实例化结果，是具体的数据实体。</li><li>内存占用：类本身不占用内存空间，而对象在内存中占用一定的空间。</li><li>创建方式：类是通过关键字&quot;class&quot;定义的，可以多次实例化创建多个对象；对象是通过使用<strong>new</strong>关键字创建的。</li></ol><p><strong>联系：</strong></p><ol><li>关联性：类和对象之间存在关联关系。类定义了对象的共同属性和行为，而对象具体化了类的定义，每个对象都有自己的状态和行为。</li><li>类的实例化：对象是类的实例化结果，通过创建类的实例（对象），可以使用对象的方法来操作对象的状态和执行特定的功能。</li><li>继承关系：类可以通过继承关系形成类的层次结构，子类继承了父类的属性和方法，并可以添加自己的特定属性和方法。通过继承，可以创建多个不同的对象。</li></ol><p>类和对象在Java中的关系可以用以下示例说明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义Person类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot; and I am &quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot; years old.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建Person对象并调用方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建Person对象</span>
        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用对象的方法</span>
        person1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;My name is John and I am 25 years old.&quot;</span>
        person2<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;My name is Alice and I am 30 years old.&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，Person类定义了属性**(name和age)<strong>和方法(speak)。通过创建Person类的实例</strong>(person1和person2)**，可以使用对象的方法来输出不同的信息。每个对象都有自己的属性值，但共享同一个类的方法定义。</p><p><strong>总结：类是对象的模板，描述了对象的属性和行为；对象是类的实例，具体化了类的定义，拥有自己的状态和行为。类和对象之间通过实例化关联在一起，通过对象可以调用类定义的方法操作对象的状态。</strong></p><h3 id="_2-4对象在内存中的存在形式" tabindex="-1"><a class="header-anchor" href="#_2-4对象在内存中的存在形式" aria-hidden="true">#</a> 2.4对象在内存中的存在形式</h3><p>我们通过图文结合的方式更清楚的一个对象在JVM内存的存在形式。</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310262233312.png" alt="image-20231026223342947" tabindex="0" loading="lazy"><figcaption>image-20231026223342947</figcaption></figure><h2 id="_3-类与对象的其他细节" tabindex="-1"><a class="header-anchor" href="#_3-类与对象的其他细节" aria-hidden="true">#</a> 3.类与对象的其他细节</h2><h3 id="_3-1属性-成员变量-字段" tabindex="-1"><a class="header-anchor" href="#_3-1属性-成员变量-字段" aria-hidden="true">#</a> 3.1属性/成员变量/字段</h3><p>从概念来说 类的属性，成员变量，字段都是一个意思。即成员变量 = 属性 = field(字段)</p><p>属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)。比如我们前面定义Dog类的int age 就<br> 是属性</p><p><strong>注意事项和细节说明</strong></p><ol><li>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名;这里简单的介绍访问修饰符： 控制属性的访问范围<br> 有四种访问修饰符 <strong>public</strong>, <strong>proctected</strong>, <strong>默认</strong>, <strong>private</strong> 。</li><li>属性的定义类型可以为任意类型，包含基本类型或引用类型</li><li>属性如果不赋值，有默认值，规则和数组一致。具体说: int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \\u0000，<br> boolean false，String null</li></ol><h3 id="_3-2如何创建对象" tabindex="-1"><a class="header-anchor" href="#_3-2如何创建对象" aria-hidden="true">#</a> 3.2如何创建对象</h3><h4 id="_1-先声明再创建" tabindex="-1"><a class="header-anchor" href="#_1-先声明再创建" aria-hidden="true">#</a> 1.先声明再创建</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cat</span> cat <span class="token punctuation">;</span> <span class="token comment">//声明对象 cat</span>
cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-直接创建" tabindex="-1"><a class="header-anchor" href="#_2-直接创建" aria-hidden="true">#</a> 2.直接创建</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3如何访问属性" tabindex="-1"><a class="header-anchor" href="#_3-3如何访问属性" aria-hidden="true">#</a> 3.3如何访问属性</h3><p><strong>基本语法</strong></p><blockquote><p>对象名.属性名;<br> 案例演示赋值和输出</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cat<span class="token punctuation">.</span>name <span class="token punctuation">;</span>
cat<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
cat<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类和对象的内存分配机制(重要)</strong><br> 我们看一个思考题<br> 我们定义一个人类(Person)(包括 名字,年龄)。编写Object2.java</p><p>我们看看下面一段代码：</p><blockquote><p>Person pl=new Person();</p><p>p1.age=10;</p><p>Person p2 = p1;//把pl赋给了p2，让p2指向p1</p><p>System.out.println(p2.age);</p></blockquote><p>请问：p2．age究竟是多少？并画出内存图：</p><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310262245785.png" alt="image-20231026224539664" tabindex="0" loading="lazy"><figcaption>image-20231026224539664</figcaption></figure><h3 id="_3-4类和对象的内存分配机制" tabindex="-1"><a class="header-anchor" href="#_3-4类和对象的内存分配机制" aria-hidden="true">#</a> 3.4类和对象的内存分配机制</h3><h4 id="_1-java-内存的结构分析" tabindex="-1"><a class="header-anchor" href="#_1-java-内存的结构分析" aria-hidden="true">#</a> 1.Java 内存的结构分析</h4><ol><li>类的内存分配： <ul><li>类的定义存储在方法区（Method Area）中，包括类的结构、字段、方法、构造方法等信息。</li><li>静态成员变量（static fields）被分配在方法区的静态存储区域，它们在程序运行期间一直存在，并且对所有类的实例共享。</li><li>类的字节码（Bytecode）也存储在方法区中。</li></ul></li><li>对象的内存分配： <ul><li>对象在堆内存（Heap）中分配空间。堆是运行时数据区域，用于存储对象实例和数组。</li><li>当使用关键字 &quot;new&quot; 创建对象时，会在堆中分配一块连续的内存空间来存储对象的实例变量。</li><li>对象的实例变量包括类的非静态成员变量和从父类继承的实例变量。</li><li>对象的方法代码存储在方法区中，而方法的实际执行是在堆中的对象上进行。</li></ul></li><li>对象引用的内存分配： <ul><li>对象引用是指向对象的指针或引用变量。</li><li>对象引用变量本身存储在栈内存（Stack）中，而不是堆内存中。</li><li>栈内存用于存储方法调用和局部变量等信息，它的空间由编译器自动分配和释放。</li><li>对象引用变量存储在栈中，但它指向的对象实例存储在堆中。</li></ul></li><li>垃圾回收**(Garbage Collection)**： <ul><li>Java中的垃圾回收机制负责自动回收不再使用的对象内存。</li><li>当对象不再被引用时，垃圾回收器会自动标记并回收该对象所占用的内存空间。</li><li>垃圾回收器通过追踪对象的引用关系，确定哪些对象是可达的，哪些对象是不可达的，从而进行垃圾回收。</li></ul></li></ol><p>需要注意的是，Java中的内存分配和回收是由Java虚拟机（JVM）负责管理的，开发人员无需显式地进行内存分配和释放操作。JVM会根据程序的需要自动进行内存管理，包括对象的创建、分配和垃圾回收等。这种自动化的内存管理机制大大简化了开发过程，并提供了更高的安全性和可靠性。</p><h4 id="_2-java-创建对象的流程简单分析" tabindex="-1"><a class="header-anchor" href="#_2-java-创建对象的流程简单分析" aria-hidden="true">#</a> 2.Java 创建对象的流程简单分析</h4><p>我们先看一下下面这串代码，看看他在内存中如何执行的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Leo&quot;</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77),r=n("li",null,"首先会在方法区去加载类的信息(包括类的属性信息和方法信息，只会加载一次)。",-1),d=n("li",null,"栈里面首先运行main方法，new创建了p对象，new出来的都存在堆里面，成员变量有默认值，成员方法实际保存的是地址，是方法区里对应的方法的地址；根据创建对象时设立的值，到堆里修改对应值，其实是直接在地址改，因为new Person（）是要赋给在栈里p的；",-1),k=n("li",null,"然后开始在堆内存分配Person这个对象的空间，进入默认初始化。",-1),v=n("li",null,"把分配的这个内存地址分配给p引用，此时p引用就会指向Person对象。",-1),m=n("strong",null,"指定初始化",-1),g={href:"http://p.name",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"20",-1),h=e(`<h4 id="_3-练习分析" tabindex="-1"><a class="header-anchor" href="#_3-练习分析" aria-hidden="true">#</a> 3.练习分析</h4><p>下面我们看一个代码练习，并分析出他的内存布局图。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>我们看看下面一段代码，会输出什么信息：
<span class="token class-name">Person</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span>（）<span class="token punctuation">;</span>
a<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&quot;小明&quot;</span>：
<span class="token class-name">Person</span> b<span class="token punctuation">;</span>
b<span class="token operator">=</span>a<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name）<span class="token comment">//小明</span>
b<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//200</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gaoziman.oss-cn-hangzhou.aliyuncs.com/Leo100/202310270907574.png" alt="image-20231027090706452" tabindex="0" loading="lazy"><figcaption>image-20231027090706452</figcaption></figure><h2 id="_4-参考文献" tabindex="-1"><a class="header-anchor" href="#_4-参考文献" aria-hidden="true">#</a> 4.参考文献</h2>`,5),w={href:"https://c.biancheng.net/view/939.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.cnblogs.com/zhangdiIT/p/5685115.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.hainingwang.cn/html/biancheng/20220710/534213.html",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"_5-总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-总结","aria-hidden":"true"},"#"),s(" 5.总结")],-1),q=n("p",null,[s("以上便是本文的全部内容，本人才疏学浅，文章有什么错误的地方，欢迎大佬们批评指正！我是"),n("strong",null,"Leo"),s("，一个在互联网行业的小白，立志成为更好的自己。")],-1),j=n("p",null,[s("如果你想了解更多关于"),n("strong",null,"Leo"),s("，可以关注公众号-程序员Leo，后面文章会首先同步至公众号。")],-1),x=n("figure",null,[n("img",{src:"https://gaoziman.oss-cn-hangzhou.aliyuncs.com/LeoPic202312031906036.png",alt:"公众号封面",tabindex:"0",loading:"lazy"}),n("figcaption",null,"公众号封面")],-1);function S(D,P){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ol",null,[r,d,k,v,n("li",null,[s("然后进行"),m,s(" ,比如："),n("a",g,[s("p.name"),t(a)]),s(' = "Leo"; p.age = '),b,s(" 。")])]),h,n("ul",null,[n("li",null,[n("a",w,[s("https://c.biancheng.net/view/939.html"),t(a)])]),n("li",null,[n("a",y,[s("https://www.cnblogs.com/zhangdiIT/p/5685115.html"),t(a)])]),n("li",null,[n("a",_,[s("https://www.hainingwang.cn/html/biancheng/20220710/534213.html"),t(a)])])]),f,q,j,x])}const O=p(i,[["render",S],["__file","java-basic-init-object.html.vue"]]);export{O as default};
